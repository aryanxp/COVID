{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","Response","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac1713c2.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react'\nimport \"./InfoBox.css\"\n\nfunction InfoBox({ title, cases, isRed, active,total, ...props }) {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n                <Typography className=\"infoBox__total\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import { Circle, Popup} from 'react-leaflet';\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 400,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      multiplier: 320,\n    },\n    deaths: {\n      hex: \"gray\",\n      multiplier: 1000,\n    },\n  };\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) =>\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType) => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            pathOptions={{color: casesTypeColors[casesType].hex,\n            fillColor: casesTypeColors[casesType].hex }}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})`}}\n                    />\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n)","import React from 'react'\nimport './Map.css'\nimport { MapContainer as LeafletMap, TileLayer } from 'react-leaflet';\nimport { showDataOnMap } from './util';\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' \n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport './Table.css';\nimport numeral from 'numeral';\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases}) => (\n                <tr>\n                <td>{country}</td>\n                <td>\n                    <strong>{numeral(cases).format(\"0,0\")}</strong>\n                </td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function(tooltipItem, data){\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    }\n}\n\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases){\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n}\n\nfunction LineGraph({ casesType, ...props }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async() => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then((response) => {\n                return response.json()})\n            .then((data) => {\n                let chartData = buildChartData(data, casesType);\n                setData(chartData);\n            });\n        };\n        \n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 &&(\n                <Line\n                data={{\n                datasets: [{\n                    backgroundColor: \"rgba(204, 16, 52, 0.5\",\n                    borderColor: \"#CC1034\",\n                    data: data,\n                },],\n            }} \n            options={options}\n            />\n            )}\n            \n        </div>\n    );\n}\n\nexport default LineGraph\n","import { MenuItem, FormControl, Select, Card, CardContent,} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport './App.css';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\nuseEffect(() => {\n  fetch(\"https://disease.sh/v3/covid-19/all\")\n  .then(response => response.json())\n  .then(data => {\n    setCountryInfo(data);\n  });\n},[]);\n  \n  useEffect(() => {\n    const getCountriesData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((Response) => Response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' \n    ? 'https://disease.sh/v3/covid-19/all'\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n        <h1>COVID 19 Tracker</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox isRed active={casesType === \"cases\"} onClick={e => setCasesType('cases')} title=\"Coronavirus cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox active={casesType === \"recovered\"} onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox isRed active={casesType === \"deaths\"} onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n        <Map\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n        \n      </Card>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}