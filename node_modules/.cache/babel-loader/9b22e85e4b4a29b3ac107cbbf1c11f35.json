{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aryanpitliya/Documents/GitHub/COVID/covid-19-tracker/src/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltips, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nfunction LineGraph({\n  casesType = 'cases'\n}) {\n  _s();\n\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType = \"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120').then(response => response.json()).then(data => {\n        const chartData = buildChartData(data, 'cases');\n        console.log(chartData);\n        setData(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Im a graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204, 16, 52, 0.5\",\n          borederColor: \"#CC1034\",\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineGraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/Users/aryanpitliya/Documents/GitHub/COVID/covid-19-tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","data","tooltipItem","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","setData","buildChartData","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borederColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function(tooltips, data){\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    }\n}\n\n\nfunction LineGraph({ casesType = 'cases'}) {\n    const [data, setData] = useState({});\n\nconst buildChartData = (data, casesType = \"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases){\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n}\n\n    useEffect(() => {\n        const fetchData = async() => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then(response => response.json())\n            .then((data) => {\n                const chartData = buildChartData(data, 'cases');\n                console.log(chartData);\n                setData(chartData);\n            });\n        };\n        \n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div>\n            <h1>Im a graph</h1>\n            {data?.length > 0 &&(\n                <Line\n            options={options}\n            data={{\n                datasets: [{\n                    backgroundColor: \"rgba(204, 16, 52, 0.5\",\n                    borederColor: \"#CC1034\",\n                    data: data}]\n            }} />\n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n"]},"metadata":{},"sourceType":"module"}